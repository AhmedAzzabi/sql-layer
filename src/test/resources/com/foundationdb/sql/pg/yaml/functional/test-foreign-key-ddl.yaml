# Test DDL related to foreign keys, particularly error checking.
---
- CreateTable: t1 (id INT PRIMARY KEY NOT NULL, n1 INT, n2 INT)
---
- CreateTable: t2 (id INT PRIMARY KEY NOT NULL, pid INT, n INT)
---
- Statement: SELECT rc.constraint_name, rc.update_rule, rc.delete_rule, kcu1.table_name, kcu1.column_name, kcu2.table_name, kcu2.column_name FROM information_schema.referential_constraints rc INNER JOIN information_schema.key_column_usage kcu1 USING (constraint_schema, constraint_name) INNER JOIN information_schema.key_column_usage kcu2 ON rc.unique_constraint_schema = kcu2.constraint_schema AND rc.unique_constraint_name = kcu2.constraint_name AND kcu1.position_in_unique_constraint = kcu2.ordinal_position
- row_count: 0
---
- Statement: ALTER TABLE t2 ADD CONSTRAINT fk_t FOREIGN KEY(pid) REFERENCES t1(id)
---
- Statement: SELECT rc.constraint_name, rc.update_rule, rc.delete_rule, kcu1.table_name, kcu1.column_name, kcu2.table_name, kcu2.column_name FROM information_schema.referential_constraints rc INNER JOIN information_schema.key_column_usage kcu1 USING (constraint_schema, constraint_name) INNER JOIN information_schema.key_column_usage kcu2 ON rc.unique_constraint_schema = kcu2.constraint_schema AND rc.unique_constraint_name = kcu2.constraint_name AND kcu1.position_in_unique_constraint = kcu2.ordinal_position
- output: [['t2.fk_t', 'RESTRICT', 'RESTRICT', 't2', 'pid', 't1', 'id']]
---
- Statement: ALTER TABLE t2 DROP FOREIGN KEY fk_t
---
- Statement: SELECT rc.constraint_name, rc.update_rule, rc.delete_rule, kcu1.table_name, kcu1.column_name, kcu2.table_name, kcu2.column_name FROM information_schema.referential_constraints rc INNER JOIN information_schema.key_column_usage kcu1 USING (constraint_schema, constraint_name) INNER JOIN information_schema.key_column_usage kcu2 ON rc.unique_constraint_schema = kcu2.constraint_schema AND rc.unique_constraint_name = kcu2.constraint_name AND kcu1.position_in_unique_constraint = kcu2.ordinal_position
- row_count: 0
---
- Statement: DROP TABLE t2
---
- Statement: SELECT rc.constraint_name, rc.update_rule, rc.delete_rule, kcu1.table_name, kcu1.column_name, kcu2.table_name, kcu2.column_name FROM information_schema.referential_constraints rc INNER JOIN information_schema.key_column_usage kcu1 USING (constraint_schema, constraint_name) INNER JOIN information_schema.key_column_usage kcu2 ON rc.unique_constraint_schema = kcu2.constraint_schema AND rc.unique_constraint_name = kcu2.constraint_name AND kcu1.position_in_unique_constraint = kcu2.ordinal_position
- row_count: 0
---
- Statement: CREATE TABLE t2 (id INT PRIMARY KEY NOT NULL, pid INT, n INT, FOREIGN KEY(pid) REFERENCES t1(id))
---
- Statement: SELECT rc.constraint_name, rc.update_rule, rc.delete_rule, kcu1.table_name, kcu1.column_name, kcu2.table_name, kcu2.column_name FROM information_schema.referential_constraints rc INNER JOIN information_schema.key_column_usage kcu1 USING (constraint_schema, constraint_name) INNER JOIN information_schema.key_column_usage kcu2 ON rc.unique_constraint_schema = kcu2.constraint_schema AND rc.unique_constraint_name = kcu2.constraint_name AND kcu1.position_in_unique_constraint = kcu2.ordinal_position
- output: [['t2.__fk_1', 'RESTRICT', 'RESTRICT', 't2', 'pid', 't1', 'id']]
---
- Statement: DROP TABLE t1
- error: [2B001, 'ERROR: Cannot drop table `test`.`t1` due for foreign key constraint `__fk_1` on `test`.`t2`']
---
- Statement: DROP INDEX t2.`__fk_1`
- error: [5000H, 'ERROR: Index `__fk_1` can not be added or removed from table `test`.`t2`']
---
- Statement: ALTER TABLE t1 ALTER COLUMN id SET DATA TYPE BIGINT
- error: [2B002, 'ERROR: Cannot alter column `id` on `test`.`t1` due for foreign key constraint `__fk_1`']
---
- Statement: ALTER TABLE t2 DROP COLUMN pid
- error: [2B002, 'ERROR: Cannot alter column `pid` on `test`.`t2` due for foreign key constraint `__fk_1`']
---
- Statement: DROP TABLE t2
---
- Statement: CREATE TABLE t2 (id INT PRIMARY KEY NOT NULL, pid INT, n INT)
---
- Statement: ALTER TABLE t2 ADD FOREIGN KEY(pid) REFERENCES t1(n1)
- error: [50032, 'ERROR: Foreign key `__fk_1` requires an index on `test`.`t1` for columns [n1]']
...
