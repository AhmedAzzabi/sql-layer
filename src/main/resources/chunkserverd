#!/bin/sh
#set -x

#
# Akiba chunkserver agent start/stop script for CentOS 4.x
# author: Thomas Jones-Low <tjoneslo@akibainc.com>
# date: 2009-12-18
#
# chkconfig: 2345 55 45
# description: starts/stops Akiba build agent
#
# processname: chunkserver
# pidfile: /usr/local/chunkserver/logs/chunkserver.pid
# config: /usr/local/chunkserver/conf/chunkserver.properties

# Source function library.
. /etc/rc.d/init.d/functions

rootdir=CSERVER.INSTALL.DIR
mysqldir=MYSQL.INSTALL.DIR
#mysqldir=/usr
#rootdir=/

name=chunkserverd
progdir="${rootdir}/usr/local/chunkserver"
confdir=${rootdir}/etc/akiban
logdir=${rootdir}/var/log
piddir=${rootdir}/var/run

RETVAL=0

jmxport=7071
rmiport=8081
debugport=9091
jar=akiban-cserver-1.0-SNAPSHOT-jar-with-dependencies.jar

prog="nohup java"
defaultmemory="512"

# chunkserver needs 2/3 of the memory on the machine
memorykb=$(grep MemTotal /proc/meminfo | sed "s/MemTotal:\s*\([0-9]*\)\s.*/\1/g")
if [ $? -eq 0 ]; then
	if [ ! $(echo "${memorykb}" | grep -E "^[0-9]+$") ]; then
		memory=${defaultmemory}
	else
		memorymb=$(( ${memorykb} / 1024 ))
		memorycs=$(( ${memorymb} * 2 / 3 ))
	fi
fi

memory=${memorycs:-${defaultmemory}}

args="-Xnoagent -XX:+HeapDumpOnOutOfMemoryError -Dlog4j.configuration=file:///${confdir}/config/log4j.properties -Dmysql.install.dir=${mysqldir} -Dakiban.admin=${confdir}  -Dcom.persistit.showgui=false  -Xmx${memory}M -jar  ${progdir}/${jar}"

# if -Dcom.persistit.showui=true, set display variable
#export DISPLAY=172.16.20.116:0.0


wait_for_pid()
{
local ret=0
local pid=$1
while [ $ret -eq 0 ]
do
        ps -p ${pid} > /dev/null
        ret=$?
        if [ $ret -eq 0 ];then
            echo -n "."
            sleep 2
        fi
done
}


test_running()
{
SERVICE=${jar}

if ps ax | grep -v grep | grep $SERVICE > /dev/null
then
    return 0 
else
    echo "ERROR: $name is not running"
    return 2
fi
}

test_stopped()
{
SERVICE=${jar}

if ps ax | grep -v grep | grep $SERVICE > /dev/null
then
    echo "ERROR: $name is still running with unknown pid. please kill it manually"
    return 3
else
    return 0 
fi
}


start() {
	RETVAL=0
	echo "INFO: $name will use $memory MB"
	for conffile in ${confdir}/config/chunkserver*.properties
	do
		jmx="-Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=$jmxport"
		debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$debugport"
		persistitrmi="-Dcom.persistit.rmiport=$rmiport"
		((jmxport   = jmxport   +1))
		((rmiport   = rmiport   +1))
		((debugport = debugport +1))

		config="-Dcom.akiban.config=${conffile}"
		file=`basename ${conffile}`
        	echo $"Starting $name with ${file}"
	        $prog $config $jmx $persistitrmi $debug $args  1>${logdir}/${file/%properties/log} 2>&1 </dev/null & PID=$!
	        RETVAL=$?
        	[ $((RETVAL = RETVAL + 0)) ] && touch ${rootdir}/var/lock/subsys/$name && echo $PID>${piddir}/${file/%properties/pid} && echo "[Started with pid: ${PID}]"
	done
	return $RETVAL
}


stop() {
	RETVAL=0
	for pidfile in ${piddir}/chunkserver*.pid
	do
	if [ -e ${pidfile} ];then
		pid=$(cat ${pidfile})
		if [ $? -eq 0 ]; then
			if [ "${pid}" != "" ]; then
				echo  $"Stopping $name. process with pid: $pid"
				if [ -f ${pidfile} ];then
					(kill  ${pid}  && echo "[Stopping process with pid ${pid}]" ) || (echo "Process ${pid} is not running" && rm -f ${pidfile} )
					KILL=$?
					[ $((RETKILL = RETKILL + KILL)) ] && rm -f ${rootdir}/var/lock/subsys/$name && wait_for_pid ${pid} && rm -f ${pidfile}
				fi
			else
				echo "ERROR: No pid found ${pidfile}. removing file" 
				rm ${pidfile}
				exit 1
			fi
		fi
	fi
	done
	test_stopped 
	RETTEST=$?
	RETVAL=$((RETTEST + RETKILL))	
	return $RETVAL
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart)
	stop
	start
	;;
  *)
	echo $"Usage: $name {start|stop|restart}"
	exit 1
esac

exit $RETVAL

