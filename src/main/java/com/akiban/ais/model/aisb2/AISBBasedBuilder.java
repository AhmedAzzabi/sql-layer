package com.akiban.ais.model.aisb2;

import com.akiban.ais.model.AISBuilder;
import com.akiban.ais.model.AkibanInformationSchema;
import com.akiban.ais.model.Index;

public class AISBBasedBuilder
    implements NewAISBuilder, NewUserTableBuilder, NewAkibanJoinBuilder
{
    // NewAISBuilder interface

    @Override
    public AkibanInformationSchema ais() {
        usable = false;
        aisb.basicSchemaIsComplete();
        aisb.groupingIsComplete();
        return aisb.akibanInformationSchema();
    }

    @Override
    public NewAISBuilder defaultSchema(String schema) {
        this.schema = schema;
        return this;
    }

    @Override
    public NewUserTableBuilder userTable(String table) {
        return userTable(schema, table);
    }

    @Override
    public NewUserTableBuilder userTable(String schema, String table) {
        checkUsable();
        if (aisb.akibanInformationSchema().getUserTable(schema, table) != null) {
            throw new IllegalArgumentException(String.format("table %s.%s already defined", schema, table));
        }
        this.schema = schema;
        this.userTable = table;
        aisb.userTable(schema, table);
        uTableColumnPos = 0;
        return this;
    }

    // NewuserTableBuilder interface

    @Override
    public NewUserTableBuilder colLong(String name) {
        return colLong(name, false, NULLABLE_DEFAULT);
    }

    @Override
    public NewUserTableBuilder colLong(String name, boolean nullable) {
        return colLong(name, nullable, false);
    }

    @Override
    public NewUserTableBuilder autoIncLong(String name) {
        return colLong(name, false, true);
    }

    private NewUserTableBuilder colLong(String name, boolean nullable, boolean autoIncrement) {
        checkUsable();
        aisb.column(schema, userTable, name, ++uTableColumnPos, "INTEGER", 10L, null, nullable, autoIncrement, null, null);
        return this;
    }

    @Override
    public NewUserTableBuilder colString(String name, int length) {
        return colString(name, length, NULLABLE_DEFAULT);
    }

    @Override
    public NewUserTableBuilder colString(String name, int length, boolean nullable) {
        return colString(name, length, nullable, CHARSET_DEFAULT);
    }

    @Override
    public NewUserTableBuilder colString(String name, int length, boolean nullable, String charset) {
        checkUsable();
        aisb.column(schema, userTable, name, ++uTableColumnPos, "VARCHAR", (long)length, null, nullable, false, charset, null);
        return this;
    }

    @Override
    public NewUserTableBuilder pk(String... columns) {
        return key(PRIMARY, columns, true, Index.PRIMARY_KEY_CONSTRAINT);
    }

    @Override
    public NewUserTableBuilder uniqueKey(String indexName, String... columns) {
        return key(indexName, columns, true, "UNIQUE KEY");
    }

    @Override
    public NewUserTableBuilder key(String indexName, String... columns) {
        return key(indexName, columns, false, "KEY");
    }

    private NewUserTableBuilder key(String indexName, String[] columns, boolean unique, String constraint) {
        checkUsable();
        aisb.index(schema, userTable, indexName, unique, constraint);
        for (int i=0; i < columns.length; ++i) {
            aisb.indexColumn(schema, userTable, indexName, columns[i], i, false, null);
        }
        return this;
    }

    @Override
    public NewAkibanJoinBuilder joinTo(String table) {
        return joinTo(schema, table);
    }

    @Override
    public NewAkibanJoinBuilder joinTo(String schema, String table) {
        String generated = String.format("autogenerated_%s_references_%s", userTable, table);
        return joinTo(schema, table, generated);
    }

    @Override
    public NewAkibanJoinBuilder joinTo(String schema, String table, String fkName) {
        checkUsable();
        this.fkIndexName = "__akiban_" + fkName;
        this.fkJoinName = "join_" + fkIndexName;
        this.fkIndexPos = 0;
        this.referencesSchema = schema;
        this.referencesTable = table;
        aisb.index(this.schema, this.userTable, fkIndexName, false, "KEY");
        aisb.joinTables(fkJoinName, schema, table, this.schema, this.userTable);
        return this;
    }

    // NewAkibanJoinBuilder

    @Override
    public NewAkibanJoinBuilder on(String childColumn, String parentColumn) {
        checkUsable();
        aisb.indexColumn(schema, userTable, fkIndexName, childColumn, fkIndexPos, false, null);
        aisb.joinColumns(fkJoinName, referencesSchema, referencesTable, parentColumn, schema, userTable, childColumn);
        return this;
    }

    @Override
    public NewAkibanJoinBuilder and(String childColumn, String parentColumn) {
        return on(childColumn, parentColumn);
    }

    // AISBBasedBuilder interface

    public AISBBasedBuilder() {
        aisb = new AISBuilder();
        usable = true;
    }

    // private

    private void checkUsable() {
        if (!usable) {
            throw new IllegalStateException("AIS has already been retrieved; can't reuse");
        }
    }

    // object state

    private final AISBuilder aisb;
    private String schema;
    private String userTable;

    private int uTableColumnPos;

    private String fkIndexName;
    private String fkJoinName;
    private int fkIndexPos;
    private String referencesSchema;
    private String referencesTable;

    private boolean usable;

    // constants

    private static final boolean NULLABLE_DEFAULT = false;
    private static final String CHARSET_DEFAULT = "UTF-8";
    private static final String PRIMARY = "PRIMARY";
}
