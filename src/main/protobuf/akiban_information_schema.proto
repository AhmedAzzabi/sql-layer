// Master akiban_information_schema protobuf description file

package akiban_schema.protobuf;
option java_package = "com.akiban.ais.protobuf";
option java_outer_classname = "AISProtobuf";

// This is the old, static AIS Types. Will be deprecated soon but
// cannot delete the message until those volumes are unsupported.
message Type {
   optional string typeName     = 1;  // name of the type
   optional int32  parameters   = 2;  // number of parameters used in the column
   optional bool   fixedSize    = 3;  // Does the type of fixed size 
                                      // (false for variable width types)
   optional int64  maxSizeBytes = 4;  // maximum size of the type in bytes
}

message TableName {
    optional string schemaName = 1;  // link to Schema.schemaName
    optional string tableName  = 2;  // link to Table.tableName
}

message CharCollation {
   optional string characterSetName = 1;
   optional string collationOrderName = 2;
}

enum JoinType {
   LEFT_OUTER_JOIN  = 0;
   RIGHT_OUTER_JOIN = 1;
   FULL_OUTER_JOIN  = 2;
   INNER_JOIN       = 3;
}

// One of the column pairs which define the Join.
message JoinColumn {
   optional string parentColumn = 1; // link to Column.columnName
   optional string childColumn  = 2; // link to Column.columnName
   optional int32  position     = 3; // order of column list in join
}

message Join {
    optional TableName parentTable  = 1;  // Parent table for this join. 
                                          // Child table is the source table.
                                          // link to Table.tableName
    repeated JoinColumn columns     = 2;  // list of columns for this join
}

message Sequence {
    optional string sequenceName    = 1; 
    optional string treeName 	    = 2; // storage system tree name
    optional int32  accumulator     = 3; // storage system accumulator index
    optional int64  start           = 4; // Starting value
    optional int64  increment       = 5; // increment by value
    optional int64  minValue        = 6; // minimum value
    optional int64  maxValue        = 7; // maximum value
    optional bool   isCycle         = 8; // cycle values
}

enum IndexMethod {
   NORMAL          = 0;                  // Regular column index.
   Z_ORDER_LAT_LON = 1;                  // Spatial index on latitude, longitude.
}

message IndexColumn {
    optional string    columnName  = 1;  // links to Column.columnName 
    optional bool      isAscending = 2;  // sort order of the column
    optional int32     position    = 3;  // order of the column in the index
    optional TableName tableName   = 4;  // can be set to override owner name (group index has columns from multiple)
    optional int32     indexedLength = 5; // number of bytes from column used in index (null if entire column is used)
}

message Index {
    optional string   indexName   = 1;
    optional string   treeName    = 2;  // storage system tree name 
    optional int32    indexId     = 3;  // id of index within table/group
    optional bool     isPK        = 4;  // Is the primary key index
    optional bool     isUnique    = 5;  // Is a unique index
    optional bool     isAkFK      = 6;  // Is a grouping foreign key index
    repeated IndexColumn columns  = 7;  // list of columns for this index
    optional string   description = 8;  // index comment holder 
    optional JoinType joinType    = 9;  // Type of join used for GroupIndex
    optional IndexMethod indexMethod  = 10; // Kind of special index
}

message Group {
   optional string rootTableName = 1;  // Root Table for this group
                                       // link to Table.tableName
   optional string treeName      = 2;  // storage system tree name  
   repeated Index  indexes       = 3;  // list of Group indexes 
}

// Column in a Table
message Column {
    optional string  columnName   = 1;
    optional string  typeName     = 2;  // link to Types.typeName
    optional bool    isNullable   = 3;  // Can column hold NULL values
    optional int32   position     = 4;  // order of column in Table 
    optional int64   typeParam1   = 5;  
    optional int64   typeParam2   = 6;
    optional int64   initAutoInc  = 7;   // initial auto increment value
    optional CharCollation charColl = 8; // column defined character set
                                         // and collation
    optional string  description  = 9;   // column comment holder
    optional bool    defaultIdentity = 10; // true if column is identity by default,
                                            // false if column is identity always, 
                                            // null if column is not an identity column
    optional TableName sequence   = 11;  // Sequence used for identity generation. 
                                         // links to Schema.schemaName & Sequence.sequenceName
                                         // null if not an identity column
    optional int64  maxStorageSize = 12; // maximum number of bytes needed to store this column
    optional int32  prefixSize     = 13; // number of bytes to describe maxStorageSize
    optional string typeBundleUUID = 14; // bundle UUID of type. null if old style type
    optional int32  typeVersion    = 15; // serialization version of type. null if old style type
    optional string defaultValue   = 16; // default value for column (null if none specified)
}

// UserTable.  
// GroupTables are derived from the root table and the
// list of joins (if any)
message Table {
    optional string  tableName    = 1;
    optional int32   tableId      = 2;  // globally unique id for table
    optional int32   ordinal      = 3;  // id of table within the group
    repeated Column  columns      = 4;  // list of columns in the table
    optional CharCollation charColl = 5; // table default character set & collation
    repeated Index   indexes      = 6;  // list of indexes on the table
    optional Join    parentTable  = 7;  // Join to parent table
    optional string  description  = 8;  // Table comment holder
    optional bool    protected    = 9;  // Table can not be altered or grouped to
                                        // by user actions. For AIS tables.
    optional int32   version     = 10;  // Version this table was created with.
                                        // For AIS tables.
    optional PendingOSC pendingOSC = 11; // ALTER by pt-online-schema-change.
}

message Property {
    optional string key = 1;
    optional string value = 2;
}

message ColumnReference {
    optional TableName table      = 1;  // table containing references
    repeated string columns       = 2;  // list of columns referenced
}

message View {
    optional string  viewName     = 1;  // name of view
    repeated Column  columns      = 2;  // list of columns in the view
    optional string  definition   = 3;  // text of CREATE VIEW
    repeated Property definitionProperties = 4; // environment in which that was parsed
    repeated ColumnReference references = 5;  // tables & their columns used in view
    optional string  description  = 6;  // View comment holder
    optional bool    protected    = 7;  // View cannot be altered
}

message Schema {
    optional string schemaName   = 1;
    repeated Table  tables       = 2;  // list of user tables in the schema
    repeated Group  groups       = 3;  // list of groups in the schema 
    optional CharCollation charColl = 4; // schema default character set & collation
    repeated View   views        = 5;  // list of views in the schema
    repeated Sequence sequences  = 6;  // list of sequences 
}

message PendingOSC {
    optional string originalName           = 1; // name of the original name this copied
    repeated PendingOSChange columnChanges = 2; // column changes to be done
    repeated PendingOSChange indexChanges  = 3; // index changes to be done
}

enum PendingOSChangeType {
    ADD    = 0;
    DROP   = 1;
    MODIFY = 2;
}

message PendingOSChange {
    optional PendingOSChangeType type = 1; // type of change
    optional string oldName = 2;           // old column / index name
    optional string newName = 3;           // new column / index name
}

message AkibanInformationSchema {
    repeated Type   types   = 1;
    repeated Schema schemas = 2;
}
