#!/bin/sh
#
# OPTIONS:
#   -f: start in foreground
#   -p <filename>: log the pid to a file (useful to kill it later)

# CONTROLLING STARTUP:
# 
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   JVM_OPTS -- Additional arguments to the JVM for heap size, etc
#   CHUNKSERVER_CONF -- Directory containing chunkserver configuration files.
#
# As a convenience, a fragment of shell is sourced in order to set one or
# more of these variables. This so-called `include' can be placed in a 
# number of locations and will be searched for in order. The lowest 
# priority search path is the same directory as the startup script, and
# since this is the location of the sample in the project tree, it should
# almost work Out Of The Box.
#
# Any serious use-case though will likely require customization of the
# include. For production installations, it is recommended that you copy
# the sample to one of /usr/share/chunkserver/chunkserver.in.sh,
# /usr/local/share/chunkserver/chunkserver.in.sh, or 
# /opt/chunkserver/chunkserver.in.sh and make your modifications there.
#
# Another option is to specify the full path to the include file in the
# environment. For example:
#
#   $ CHUNKSERVER_INCLUDE=/path/to/in.sh chunkserver
#
# If you would rather configure startup entirely from the environment, you
# can disable the include by exporting an empty CHUNKSERVER_INCLUDE, or by 
# ensuring that no include files exist in the aforementioned search list.
# Be aware that you will be entirely responsible for populating the needed
# environment variables.

# If an include wasn't specified in the environment, then search for one...
if [ "x$CHUNKSERVER_INCLUDE" = "x" ]; then
    # Locations (in order) to use when searching for an include file.
    for include in /usr/share/chunkserver/chunkserver.in.sh \
                   /usr/local/share/chunkserver/chunkserver.in.sh \
                   /opt/chunkserver/chunkserver.in.sh \
                   ~/.chunkserver.in.sh \
                   `dirname $0`/chunkserver.in.sh; do
        if [ -r $include ]; then
            . $include
            break
        fi
    done
# ...otherwise, source the specified include.
elif [ -r $CHUNKSERVER_INCLUDE ]; then
    . $CHUNKSERVER_INCLUDE
fi

# Use JAVA_HOME if set, otherwise look for java in PATH
if [ -x $JAVA_HOME/bin/java ]; then
    JAVA=$JAVA_HOME/bin/java
else
    JAVA=`which java`
fi

if [ -z $CHUNKSERVER_CONF ]; then
    echo "You must set the CHUNKSERVER_CONF var" >&2
    exit 1
fi

launch_service()
{
    foreground=$1
    props=$2
    usegui=$3
    chunkserver_parms="-Dcom.akiban.config=$CONFIG_FILE"

    if [ "x$usegui" != "x" ]; then
        chunkserver_parms="$chunkserver_parms -Dcom.persistit.showgui=true"
    fi
    
    if [ "x$foreground" != "x" ]; then
        $JAVA $JVM_OPTS $chunkserver_parms -jar $JAR_FILE $props 
    # Startup the chunkserver and background it.
    else
        exec $JAVA $JVM_OPTS $cassandra_parms -jar $JAR_FILE $props <&- &
        [ ! -z $pidpath ] && printf "%d" $! > $pidpath
    fi

    return $?
}

# Parse any command line options.
args=`getopt fgh:bD: "$@"`
eval set -- "$args"

while true; do
    case "$1" in
        -f)
            foreground="yes"
            shift
        ;;
        -g)
            gui="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-f] [-h] [-b]"
            exit 0
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$foreground" "$properties" "$gui"

exit $?

