#!/bin/bash
#
# Copyright (C) 2009-2013 FoundationDB, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# CONTROLLING STARTUP:
#   - Command line parameters
#   - JVM_OPTS -- Additional arguments to the JVM.
#     Influenced by <config>/jvm.options, if it exists.
#

# Use JAVA_HOME if set, otherwise look for java in PATH
if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
else
    JAVA=$(which java)
fi

infer_home_dir()
{
    local loc_local="$(cd $(dirname $0)/..; pwd -P)"
    local loc_global="/usr/share/foundationdb/sql"

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # If this is called via system location, assume global
        if [ "$0" = "/usr/sbin/fdbsqllayer" ]; then
            echo $loc_global
        else
            echo $loc_local
        fi
    else
        echo "$1"
    fi
}

infer_jar_file()
{
    local loc_local="${FDBSQL_HOME}/target/fdb-sql-layer-1.9.0.jar"
    local loc_global="/usr/share/foundationdb/sql/fdb-sql-layer.jar"

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try local first so you can develop *and* have a system package installed
        if [ -f "$loc_local" ]; then
            echo $loc_local
        elif [ -f "$loc_global" ]; then
            echo $loc_global
        else
            echo "<UNKNOWN>"
        fi
    else
        echo "$1"
    fi
}

infer_dep_dir()
{
    local loc_local="${FDBSQL_HOME}/target/dependency"
    local loc_global="/usr/share/foundationdb/sql/server"

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try local first so you can develop *and* have a system package installed
        if [ -d "$loc_local" ]; then
            echo $loc_local
        elif [ -d "$loc_global" ]; then
            echo $loc_global
        else
            echo "<UNKNOWN>"
        fi
    else
        echo "$1"
    fi
}


get_version()
{
    jar_file=$(infer_jar_file $1)
    dep_dir=$(infer_dep_dir $2)
    CLASSPATH=$jar_file:$dep_dir/*

    server_version=$(exec "$JAVA" -cp "$CLASSPATH" com.foundationdb.server.GetVersion)
    persistit_version=$(exec "$JAVA" -cp "$CLASSPATH" com.persistit.GetVersion)
    echo "server   : ${server_version}"
    echo "persistit: ${persistit_version}"
}

launch_service()
{
    FDBSQL_HOME=$(infer_home_dir $1)
    foreground=$2
    props=$3
    usegui=$4
    pidpath=$5
    JAR_FILE=$(infer_jar_file $6)
    DEP_DIR=$(infer_dep_dir $7)
    FDBSQL_CONF=$8

    if [ -z "$FDBSQL_CONF" ]; then
        FDBSQL_CONF="${FDBSQL_HOME}/conf"
    fi

    if [ -n "$pidpath" ]; then
        fdbsql_parms="$fdbsql_parms -Dfdbsql.pidfile=$pidpath"
    fi

    if [ -f "$FDBSQL_CONF/jvm.options" ]; then
        . "$FDBSQL_CONF/jvm.options"
    fi

    if [ -n "$usegui" ]; then
        fdbsql_parms="$fdbsql_parms -Dcom.persistit.showgui=true"
    fi

    fdbsql_parms="$fdbsql_parms -Dfdbsql.home=$FDBSQL_HOME -Dfdbsql.config_dir=$FDBSQL_CONF"
    fdbsql_parms="$fdbsql_parms -Dlog4j.configuration=file:$FDBSQL_CONF/log4j.properties"
    fdbsql_parms="$fdbsql_parms $print_compilation $props"

    CLASSPATH=$JAR_FILE:$DEP_DIR/*
    main_class="com.foundationdb.sql.Main"
    if [ -n "$mode" ]; then
        if [ "$mode" == "window" ]; then
          fdbsql_parms="$fdbsql_parms -Drequire:com.foundationdb.sql.ui.SwingConsoleService -Dprioritize:com.foundationdb.sql.ui.SwingConsoleService"
          main_class=com.foundationdb.sql.ui.MainWithSwingConsole
        fi
        if [ -n "$profile" ]
        then
            echo $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class
            exec $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class
        else
            echo "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
            exec "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
        fi
    else
        if [ -n "$profile" ]
        then
            exec $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" "$JAVA" $main_class <&- &
        else
            exec "$JAVA" $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class <&- &
        fi
    fi

    return $?
}

# Parse any command line options.
args=`getopt c:d:D:fghH:j:kp:swv "$@"`
eval set -- "$args"

while true; do
    case "$1" in
        -d)
            depdir="$2"
            shift 2
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -c)
            conf="$2"
            shift 2
        ;;
        -f)
            mode="foreground"
            shift
        ;;
        -w)
            mode="window"
            shift
        ;;
        -g)
            gui="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-c conf_dir] [-d dep_dir] [-D prop] [-f] [-g] [-h] [-H home_dir] [-j jar_file] [-k] [-p pid_file] [-s] [-w] [-v]"
            echo "-c configuration directory to use"
            echo "-d directory with jar dependencies"
            echo "-D extra property to pass to JVM, can be repeated"
            echo "-f launch the SQL layer process in the foreground"
            echo "-g launch the persistit GUI"
            echo "-h print this help message"
            echo "-H directory to use for home"
            echo "-j specify a jar file to use"
            echo "-k kill an existing SQL layer process"
            echo "-p specify a pid file"
            echo "-s profile using Solaris Studio"
            echo "-w start console window"
            echo "-v print SQL layer version"
            exit 0
        ;;
        -H)
            homedir="$2"
            shift 2
        ;;
        -j)
            jarfile="$2"
            shift 2
        ;;
        -k)
            # this is not ideal but is only intended to be
            # called by a developer in their environment when
            # they want to quickly kill a running process.
            pgrep -u `whoami` -f fdb-sql-layer | xargs kill -9
            exit 0
        ;;
        -p)
            pidfile="$2"
            shift 2
        ;;
        -s)
            profile=`which collect`
            profile="$profile -y SIGCONT -j on -J "
            print_compilation="$fdbsql_parms -XX:+PrintCompilation"
            shift
        ;;
        -v)
            get_version $jarfile $depdir
            exit 0
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$homedir" "$mode" "$properties" "$gui" "$pidfile" "$jarfile" "$depdir" "$conf"

exit $?

