#!/bin/bash
#
# Copyright (C) 2009-2013 Akiban Technologies, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# CONTROLLING STARTUP:
# 
# This script relies on few environment variables to determine startup
# behavior, those variables are:
#
#   JVM_OPTS -- Additional arguments to the JVM for heap size, etc
#   FDBSQL_CONF -- Directory containing configuration files.
#   FDBSQL_HOME -- Directory passed as fdbsql.home (e.g. plugin loading)
#

# Use FDBSQL_HOME if set, otherwise assume source checkout
if [ -z "$FDBSQL_HOME" ]; then
    FDBSQL_HOME=$(cd $(dirname $0)/..; pwd -P)
fi

# Use JAVA_HOME if set, otherwise look for java in PATH
if [ -x $JAVA_HOME/bin/java ]; then
    JAVA=$JAVA_HOME/bin/java
else
    JAVA=`which java`
fi

infer_jar_file()
{
    local loc_local="${FDBSQL_HOME}/target/foundationdb-sql-layer-2.0.0-SNAPSHOT.jar"
    local loc_global="/usr/share/foundationdb-sql/foundationdb-sql-layer.jar"

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try local first so you can develop *and* nave a system package installed
        if [ -f "$loc_local" ]; then
            echo $loc_local
        elif [ -f "$loc_global" ]; then
            echo $loc_global
        else
            echo "<UNKNOWN>"
        fi
    else
        echo "$1"
    fi
}

infer_dep_dir()
{
    local loc_local="${FDBSQL_HOME}/target/dependency"
    local loc_global="/usr/share/foundationdb-sql/server"

    # Only infer if passed no argument
    if [ -z "$1" ]; then
        # Try local first so you can develop *and* nave a system package installed
        if [ -d "$loc_local" ]; then
            echo $loc_local
        elif [ -d "$loc_global" ]; then
            echo $loc_global
        else
            echo "<UNKNOWN>"
        fi
    else
        echo "$1"
    fi
}


get_version()
{
    jar_file=$(infer_jar_file $1)
    dep_dir=$(infer_dep_dir $2)
    CLASSPATH=$jar_file:$dep_dir/*

    server_version=$(exec $JAVA -cp "$CLASSPATH" com.foundationdb.server.GetVersion)
    persistit_version=$(exec $JAVA -cp "$CLASSPATH" com.persistit.GetVersion)
    echo "server   : ${server_version}"
    echo "persistit: ${persistit_version}"
}

launch_service()
{
    foreground=$1
    props=$2
    usegui=$3
    pidpath=$4
    JAR_FILE=$(infer_jar_file $5)
    DEP_DIR=$(infer_dep_dir $6)
    FDBSQL_CONF=$7

    if [ -z "$FDBSQL_CONF" ]; then
        FDBSQL_CONF="${FDBSQL_HOME}/conf"
    fi

    if [ -n "$pidpath" ]; then
        fdbsql_parms="$fdbsql_parms -Dfdbsql.pidfile=$pidpath"
    fi

    if [ -f "$FDBSQL_CONF/config/jvm.options" ]; then
        . "$FDBSQL_CONF/config/jvm.options"
    fi

    if [ -n "$usegui" ]; then
        fdbsql_parms="$fdbsql_parms -Dcom.persistit.showgui=true"
    fi

    fdbsql_parms="$fdbsql_parms -Dfdbsql.home=$FDBSQL_HOME -Dfdbsql.config_dir=$FDBSQL_CONF"
    fdbsql_parms="$fdbsql_parms -Dservices.config=$FDBSQL_CONF/config/services-config.yaml -Dlog4j.configuration=file:$FDBSQL_CONF/config/log4j.properties"
    fdbsql_parms="$fdbsql_parms $print_compilation $props"

    CLASSPATH=$JAR_FILE:$DEP_DIR/*
    main_class="com.foundationdb.server.AkServer"
    if [ -n "$mode" ]; then
        if [ "$mode" == "window" ]; then
          fdbsql_parms="$fdbsql_parms -Drequire:com.foundationdb.server.service.ui.SwingConsoleService -Dprioritize:com.foundationdb.server.service.ui.SwingConsoleService"
          main_class=com.foundationdb.server.service.ui.AkServerWithSwingConsole
        fi
        if [ -n "$profile" ]
        then
            echo $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" $JAVA  $main_class
            exec $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" $JAVA  $main_class
        else
            echo $JAVA $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
            exec $JAVA $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class
        fi
    else
        echo ${FDBSQL_HOME}
        if [ -n "$profile" ]
        then
            exec $profile "$JVM_OPTS $fdbsql_parms -cp $CLASSPATH" $JAVA $main_class <&- &
        else
            exec $JAVA $JVM_OPTS $fdbsql_parms -cp "$CLASSPATH" $main_class <&- &
        fi
    fi

    return $?
}

# Parse any command line options.
args=`getopt fwkvghsj:d:c:p:D: "$@"`
eval set -- "$args"

while true; do
    case "$1" in
        -p)
            pidfile="$2"
            shift 2
        ;;
        -j)
            jarfile="$2"
            shift 2
        ;;
        -d)
            depdir="$2"
            shift 2
        ;;
        -c)
            conf="$2"
            shift 2
        ;;
        -f)
            mode="foreground"
            shift
        ;;
        -w)
            mode="window"
            shift
        ;;
        -g)
            gui="yes"
            shift
        ;;
        -h)
            echo "Usage: $0 [-c conf_dir] [-d dep_dir] [-f] [-g] [-h] [-j jar_file] [-k] [-p pid_file] [-s] [-w] [-v]"
            echo "-c configuration directory to use"
            echo "-d directory with jar dependencies"
            echo "-f launch the SQL layer process in the foreground"
            echo "-g launch the persistit GUI"
            echo "-h print this help message"
            echo "-j specify a jar file to use"
            echo "-k kill an existing SQL layer process"
            echo "-p specify a pid file"
            echo "-s profile using Solaris Studio"
            echo "-w start console window"
            echo "-v print SQL layer version"
            exit 0
        ;;
        -D)
            properties="$properties -D$2"
            shift 2
        ;;
        -k)
            # this is not ideal but is only intended to be
            # called by a developer in their environment when
            # they want to quickly kill a running process.
            # can kill other process with akiban-server
            # in their name or arguments too...
            pgrep -u `whoami` -f akiban-server | xargs kill -9
            exit 0
        ;;
        -s)
            profile=`which collect`
            profile="$profile -y SIGCONT -j on -J "
            print_compilation="$fdbsql_parms -XX:+PrintCompilation"
            shift
        ;;
        -v)
            get_version $jarfile $depdir
            exit 0
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Error parsing arguments!" >&2
            exit 1
        ;;
    esac
done

# Start up the service
launch_service "$mode" "$properties" "$gui" "$pidfile" "$jarfile" "$depdir" "$conf"

exit $?

