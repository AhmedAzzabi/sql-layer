#!/bin/bash

RUN_TESTS='yes'
OUT_FILE=''
while getopts 'sho:' opt; do
    case $opt in
        s) RUN_TESTS='no' ;;
        o) OUT_FILE=$OPTARG ;;
        ?) echo 'Run with -s to skip "mvn test", -o <file> to output the failures to a file' ; exit 1 ;;
    esac
done

echo "Getting known failures from nighthawk."
KNOWN_FAILURES=$(wget -qO - http://172.16.20.117/t3-regressions/known-failures)
if [ -n "$OUT_FILE" ]; then
    echo "...outputting to $OUT_FILE"
    echo "$KNOWN_FAILURES" > $OUT_FILE
fi

if [ "$RUN_TESTS" = "yes" ]; then
    CMD='mvn test -Dtest=PostgresServerMiscYamlIT -Dakiban.test.extraJvmArgs=-Dnewtypes=true'
    echo "Running tests: $CMD"
    echo '...'
    time ($CMD > /dev/null)
    echo "Tests finished."
else
    echo "Skipping tests run."
fi

BASE=$(dirname $(readlink -f $0))
FAILED=$(grep '^testYaml' $BASE/target/surefire-reports/com.akiban.sql.pg.PostgresServerMiscYamlIT.txt | sed -r 's/testYaml \[([^]]*).*/\1/' | sort)
FAILDIFF=$(diff --suppress-common-lines <(echo "$KNOWN_FAILURES") <(echo "$FAILED"))
REGRESSIONS=$(echo "$FAILDIFF" | grep '>')
FIXES=$(echo "$FAILDIFF" | grep '<')
RESULT="neither"
if [ -n "$FIXES" ]; then
    echo "$FIXES"       | sed 's/^< /Fixed:     /'
    RESULT="fixes"
fi
if [ -n "$REGRESSIONS" ]; then
    echo "$REGRESSIONS" | sed 's/^> /REGRESSED: /'
    RESULT="regressions"
fi

EXIT_CODE=1
if [ ( "$RESULT" = "fixes" ) -a ( -n "$OUT_FILE" ) ]; then
    echo "Updating expected failures file"
    echo "$FAILED" > $OUT_FILE
elif [ "$RESULT" = "neither" ]; then
    EXIT_CODE=0
    echo "No fixes or regressions."
fi
exit $EXIT_CODE
